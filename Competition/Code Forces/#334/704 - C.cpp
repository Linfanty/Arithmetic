#include <cstdio>
#include <cstring>
#include <map>
#include <algorithm>

using namespace std;

int n,ans,cur;
char s[100005];
int dp[3][3][3];//0未开始，1开始中，2结束

int main() {
    while(1==scanf("%d",&n)) {
        scanf("%s",s);
        cur=s[0]-'0';
        dp[0][0][cur]=1;
        dp[0][0][1-cur]=0;

        dp[0][1][1-cur]=1;
        dp[0][1][cur]=0;

        dp[0][2][1-cur]=0;
        dp[0][2][cur]=0;
        for(int i=1;s[i]!='\0';++i) {
            if(s[i]-'0'==0) {
                dp[i&1][0][0]=max(dp[(i-1)&1][0][0],dp[(i-1)&1][0][1]+1);
                dp[i&1][0][1]=dp[(i-1)&1][0][1];

                dp[i&1][1][0]=max(dp[(i-1)&1][0][0],dp[(i-1)&1][1][0]);
                dp[i&1][1][1]=max(max(dp[(i-1)&1][0][1],dp[(i-1)&1][1][1]),max(dp[(i-1)&1][0][0],dp[(i-1)&1][1][0])+1);

                dp[i&1][2][0]=max(max(dp[(i-1)&1][1][0],dp[(i-1)&1][2][0]),max(dp[(i-1)&1][1][1],dp[(i-1)&1][2][1])+1);
                dp[i&1][2][1]=max(dp[(i-1)&1][1][1],dp[(i-1)&1][2][1]);
            }
            else {
                dp[i&1][0][1]=max(dp[(i-1)&1][0][1],dp[(i-1)&1][0][0]+1);
                dp[i&1][0][0]=dp[(i-1)&1][0][0];

                dp[i&1][1][1]=max(dp[(i-1)&1][0][1],dp[(i-1)&1][1][1]);
                dp[i&1][1][0]=max(max(dp[(i-1)&1][0][0],dp[(i-1)&1][1][0]),max(dp[(i-1)&1][0][1],dp[(i-1)&1][1][1])+1);

                dp[i&1][2][1]=max(max(dp[(i-1)&1][1][1],dp[(i-1)&1][2][1]),max(dp[(i-1)&1][1][0],dp[(i-1)&1][2][0])+1);
                dp[i&1][2][0]=max(dp[(i-1)&1][1][0],dp[(i-1)&1][2][0]);
            }
        }
        printf("%d\n",max(max(dp[(n-1)&1][1][0],dp[(n-1)&1][1][1]),max(dp[(n-1)&1][2][0],dp[(n-1)&1][2][1])));
    }
    return 0;
}
